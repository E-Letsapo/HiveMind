//nulapp.js
import React, { Component } from 'react';
import logo from './logo.svg';
import './NulApp.css';

class NulApp extends Component {
  state = {
    tables: [],
    data: [],
    selectedTable: null,
    loading: false,
  };

  componentDidMount() {
    this.fetchTables();
  }

  fetchTables = () => {
    fetch('http://localhost:3002/tables')
      .then((response) => response.json())
      .then((data) => {
        if (Array.isArray(data)) {
          this.setState({ tables: data });

          const { selectedTable } = this.state;
          if (selectedTable) {
            this.fetchTableData(selectedTable);
          }
        } else {
          console.error('Invalid response data:', data);
        }
      })
      .catch((error) => {
        console.error('Error fetching tables:', error);
      });
  };

  fetchTableData = (table) => {
    this.setState({ loading: true });
    fetch(`http://localhost:3002/${table}`)
      .then((response) => response.json())
      .then((data) => {
        this.setState({ data, loading: false });
      })
      .catch((error) => {
        console.error('Error fetching table data:', error);
        this.setState({ data: [], loading: false });
      });
  };

  selectTable = (table) => {
    this.setState({ selectedTable: table });
    this.fetchTableData(table);
  };

  insertData = () => {
    const { selectedTable } = this.state;
    const newData = {};

    switch (selectedTable) {
      case 'universities':
        newData.university_name = prompt('Enter university name:');
        break;
      case 'students':
        newData.student_id = prompt('Enter student ID:');
        newData.university_name = prompt('Enter university name:');
        newData.arrival_year = prompt('Enter arrival year:');
        newData.completion_year = prompt('Enter completion year:');
        newData.year_of_study = prompt('Enter year of study:');
        break;
      case 'lecturers':
        newData.lecturer_id = prompt('Enter lecturer ID:');
        newData.university_name = prompt('Enter university name:');
        break;
      case 'students/personal-info':
        newData.spersonal_info_id = prompt("Enter student's personal info ID:");
        newData.student_id = prompt('Enter student ID:');
        newData.first_name = prompt('Enter first name:');
        newData.middle_name = prompt('Enter middle name:');
        newData.last_name = prompt('Enter last name:');
        newData.id_number = prompt('Enter ID number:');
        newData.district = prompt('Enter district:');
        newData.contact = prompt('Enter contact:');
        newData.university_name = prompt('Enter university name:');
        break;
      case 'lecturers/personal-info':
        newData.lpersonal_info_id = prompt("Enter lecturer's personal info ID:");
        newData.lecturer_id = prompt('Enter lecturer ID:');
        newData.first_name = prompt('Enter first name:');
        newData.middle_name = prompt('Enter middle name:');
        newData.last_name = prompt('Enter last name:');
        newData.id_number = prompt('Enter ID number:');
        newData.district = prompt('Enter district:');
        newData.contact = prompt('Enter contact:');
        newData.university_name = prompt('Enter university name:');
        break;
      default:
        console.error('Invalid table selection');
        return;
    }

    //Only allow insert operation if the university name is NUL
    if(newData.university_name !== 'NUL')
    {
      window.error('Please note that only/${university_name} can perform this operation');
      return;
    }

    // Ask for confirmation
  if (window.confirm('Are you sure you want to insert the data?')) {
    fetch(`http://localhost:3002/${selectedTable}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(insertData),
    })
      .then((response) => {
        if (response.ok) {
          console.log('Data inserted successfully');
          this.fetchTableData(selectedTable);
        } else {
          console.error('Error inserting data');
        }
      })
      .catch((error) => {
        console.error('Error connecting to server:', error);
      });
  }
};

  updateData = () => {
    const { selectedTable } = this.state;
    const updateData = {};

    switch (selectedTable) {
      case 'universities':
        updateData.id = prompt('Enter university ID to update:');
        updateData.university_name = prompt('Enter new university name:');
        break;
      case 'students':
        updateData.student_id = prompt('Enter student ID to update:');
        updateData.university_name = prompt('Enter university name to update:');
        updateData.arrival_year = prompt('Enter new arrival year:');
        updateData.completion_year = prompt('Enter new completion year:');
        updateData.year_of_study = prompt('Enter new year of study:');
        break;
      case 'lecturers':
        updateData.lecturer_id = prompt('Enter lecturer ID to update:');
        updateData.university_name = prompt('Enter university name to update:');
        break;
      case 'students/personal-info':
        updateData.spersonal_info_id = prompt("Enter student's personal info ID to update:");
        updateData.student_id = prompt('Enter student ID to update:');
        updateData.first_name = prompt('Enter new first name:');
        updateData.middle_name = prompt('Enter new middle name:');
        updateData.last_name = prompt('Enter new last name:');
        updateData.id_number = prompt('Enter new ID number:');
        updateData.district = prompt('Enter new district:');
        updateData.contact = prompt('Enter new contact:');
        updateData.university_name = prompt('Enter university name to update:');
        break;
      case 'lecturers/personal-info':
        updateData.lpersonal_info_id = prompt("Enter lecturer's personal info ID to update:");
        updateData.lecturer_id = prompt('Enter lecturer ID to update:');
        updateData.first_name = prompt('Enter new first name:');
        updateData.middle_name = prompt('Enter new middle name:');
        updateData.last_name = prompt('Enter new last name:');
        updateData.id_number = prompt('Enter new ID number:');
        updateData.district = prompt('Enter new district:');
        updateData.contact = prompt('Enter new contact:');
        updateData.university_name = prompt('Enter university name to update:');
        break;
      default:
        console.error('Invalid table selection');
        return;
    }

    //Only allow update operation if the university name is NUL
    if(newData.university_name !== 'NUL')
    {
      window.error('Please note that only/${university_name} can perform this operation');
      return;
    }

    // Ask for confirmation
  if (window.confirm('Are you sure you want to update the data?')) {
    const queryString = Object.keys(updateData)
      .map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(updateData[key])}`)
      .join('&');

    fetch(`http://localhost:3002/${selectedTable}?${queryString}`, {
      method: 'PUT',
    })
      .then((response) => {
        if (response.ok) {
          console.log('Data updated successfully');
          this.fetchTableData(selectedTable);
        } else {
          console.error('Error updating data');
        }
      })
      .catch((error) => {
        console.error('Error connecting to server:', error);
      });
  }
};


  deleteData = () => {
    const { selectedTable } = this.state;
    let deleteData = {};

    switch (selectedTable) {
      case 'universities':
        deleteData.id = prompt('Enter university ID to delete:');
        break;
      case 'students':
        deleteData.student_id = prompt('Enter student ID to delete:');
        deleteData.university_name = prompt('Enter university name to delete:');
        break;
      case 'lecturers':
        deleteData.lecturer_id = prompt('Enter lecturer ID to delete:');
        deleteData.university_name = prompt('Enter university name to delete:');
        break;
      case 'students/personal-info':
        deleteData.spersonal_info_id = prompt("Enter student's personal info ID to delete:");
        deleteData.student_id = prompt('Enter student ID to delete:');
        break;
      case 'lecturers/personal-info':
        deleteData.lpersonal_info_id = prompt("Enter lecturer's personal info ID to delete:");
        deleteData.lecturer_id = prompt('Enter lecturer ID to delete:');
        break;
      default:
        console.error('Invalid table selection');
        return;
    }

    //Only allow delete operation if the university name is NUL
    if(newData.university_name !== 'NUL')
    {
      window.error('Please note that only/${university_name} can perform this operation');
      return;
    }

    // Ask for confirmation
  if (window.confirm('Are you sure you want to delete the data?')) {
    const queryString = Object.keys(deleteData)
      .map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(deleteData[key])}`)
      .join('&');

    fetch(`http://localhost:3002/${selectedTable}?${queryString}`, {
      method: 'DELETE',
    })
      .then((response) => {
        if (response.ok) {
          console.log('Data deleted successfully');
          this.fetchTableData(selectedTable);
        } else {
          console.error('Error deleting data');
        }
      })
      .catch((error) => {
        console.error('Error connecting to server:', error);
      });
  }
};
  render() {
    const { selectedTable, tables, data, loading } = this.state;
  
    const handleLogout = () => {
      // Perform logout logic here
      // For example, clear any authentication token or session data
  
      // Redirect back to App.js or any desired page
      window.location.href = '/'; // Assuming App.js is the root page
    };

    const filteredData = data.filter((row) => row.university_name === 'NUL');
  
    return (
      <div className="App">
        <div className="NulApp-header">
          <img src={logo} className="App-logo" alt="logo" />
          <h1>NUL Database Management System</h1>
          <div className="container">
            <div className="table-list">
            {selectedTable && (
            <div className="selected-table">
              <h2>{selectedTable}</h2>
              {loading ? (
                <div className="loading">Loading...</div>
              ) : filteredData.length > 0 ? (
                <table>
                  <thead>
                    <tr>
                      {Object.keys(filteredData[0]).map((key) => (
                        <th key={key}>{key}</th>
                      ))}
                    </tr>
                  </thead>
                  <tbody>
                    {filteredData.map((row, index) => (
                      <tr key={index}>
                        {Object.values(row).map((value, index) => (
                          <td key={index}>{value}</td>
                        ))}
                      </tr>
                    ))}
                  </tbody>
                </table>
              ) : (
                <div className="no-data">No data available in this table</div>
              )}
              <div className="table-actions">
                <button onClick={this.insertData}>Insert Data</button>
                <button onClick={this.updateData}>Update Data</button>
                <button onClick={this.deleteData}>Delete Data</button>
              </div>
            </div>
          )}
              <div>
                <h2>Other Tables</h2>
                {tables.map((table) => (
                  <div
                    key={table}
                    className={`table-item ${selectedTable === table ? 'active' : ''}`}
                    onClick={() => this.selectTable(table)}
                  >
                    {table}
                  </div>
                ))}
              </div>
            </div>
          </div>
          <div className="actions">
            <button onClick={this.fetchTables}>Refresh Tables</button>
            <button onClick={handleLogout}>Logout</button>
          </div>
        </div>
      </div>
    );
  }
}  
export default NulApp;
